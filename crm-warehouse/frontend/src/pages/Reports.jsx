import React, { useState } from "react";
import {
  BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell
} from "recharts";

export default function ReportsPage() {
  const [mainTab, setMainTab] = useState("reports"); // reports –∏–ª–∏ charts

  // ------------------ –î–∞–Ω–Ω—ã–µ –∏ —Å—Ç–µ–π—Ç –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ ------------------
  const [period, setPeriod] = useState("all"); // all, day, month, year, range
  const [date, setDate] = useState("");
  const [month, setMonth] = useState("");
  const [year, setYear] = useState("");
  const [rangeStart, setRangeStart] = useState("");
  const [rangeEnd, setRangeEnd] = useState("");
  const [reportGenerated, setReportGenerated] = useState(false);

  const stats = {
    totalProducts: 15,
    totalQuantity: 120,
    totalValue: 285000,
    mostExpensive: "–¢–æ–≤–∞—Ä B",
    leastStock: "–¢–æ–≤–∞—Ä C",
  };

  const isRangeValid = () => {
    if (!rangeStart || !rangeEnd) return false;
    return rangeStart <= rangeEnd;
  };

  const handleGenerateReport = (e) => {
    e.preventDefault();
    if (period === "range" && !isRangeValid()) {
      alert("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –¥–∞—Ç–µ –∫–æ–Ω—Ü–∞.");
      return;
    }
    setReportGenerated(true);
    // –í—ã–∑–æ–≤ backend –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
  };

  const getPeriodText = () => {
    switch (period) {
      case "day": return date ? `–∑–∞ –¥–µ–Ω—å: ${date}` : "–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å";
      case "month": return month ? `–∑–∞ –º–µ—Å—è—Ü: ${month}` : "–≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü";
      case "year": return year ? `–∑–∞ –≥–æ–¥: ${year}` : "–≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥";
      case "range": return rangeStart && rangeEnd ? `–∑–∞ –ø–µ—Ä–∏–æ–¥: —Å ${rangeStart} –ø–æ ${rangeEnd}` : "–≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥";
      case "all":
      default: return "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è";
    }
  };

  // ------------------ –î–∞–Ω–Ω—ã–µ –∏ —Å—Ç–µ–π—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ ------------------
  const [activeChartTab, setActiveChartTab] = useState("stockCategories");

  const stockCategoriesData = [
    { category: "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", stock: 120 },
    { category: "–û–¥–µ–∂–¥–∞", stock: 80 },
    { category: "–ü—Ä–æ–¥—É–∫—Ç—ã", stock: 150 },
    { category: "–•–æ–∑—Ç–æ–≤–∞—Ä—ã", stock: 60 },
  ];

  const incomingOutgoingData = [
    { date: "01.05", incoming: 50, outgoing: 20 },
    { date: "02.05", incoming: 40, outgoing: 30 },
    { date: "03.05", incoming: 60, outgoing: 40 },
    { date: "04.05", incoming: 30, outgoing: 50 },
  ];

  const topSellingData = [
    { name: "–¢–æ–≤–∞—Ä A", sales: 120 },
    { name: "–¢–æ–≤–∞—Ä B", sales: 100 },
    { name: "–¢–æ–≤–∞—Ä C", sales: 90 },
    { name: "–¢–æ–≤–∞—Ä D", sales: 80 },
    { name: "–¢–æ–≤–∞—Ä E", sales: 75 },
    { name: "–¢–æ–≤–∞—Ä F", sales: 60 },
    { name: "–¢–æ–≤–∞—Ä G", sales: 50 },
    { name: "–¢–æ–≤–∞—Ä H", sales: 40 },
    { name: "–¢–æ–≤–∞—Ä I", sales: 35 },
    { name: "–¢–æ–≤–∞—Ä J", sales: 30 },
  ];

  // –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

  const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#AA336A"];

  return (
    <div style={{ padding: 20 }}>
      <h1>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞</h1>

      <nav style={{ marginBottom: 20 }}>
        <button
          onClick={() => setMainTab("reports")}
          style={{
            marginRight: 10,
            padding: "8px 16px",
            backgroundColor: mainTab === "reports" ? "#007bff" : "#eee",
            color: mainTab === "reports" ? "white" : "black",
            border: "none",
            borderRadius: 4,
            cursor: "pointer",
          }}
        >
          –û—Ç—á—ë—Ç—ã
        </button>
        <button
          onClick={() => setMainTab("charts")}
          style={{
            marginRight: 10,
            padding: "8px 16px",
            backgroundColor: mainTab === "charts" ? "#007bff" : "#eee",
            color: mainTab === "charts" ? "white" : "black",
            border: "none",
            borderRadius: 4,
            cursor: "pointer",
          }}
        >
          –ì—Ä–∞—Ñ–∏–∫–∏
        </button>
      </nav>

      {mainTab === "reports" && (
        <>
          <form onSubmit={handleGenerateReport} style={formStyle}>
            <label>
              –ü–µ—Ä–∏–æ–¥:
              <select
                value={period}
                onChange={(e) => {
                  setPeriod(e.target.value);
                  setReportGenerated(false);
                  setDate("");
                  setMonth("");
                  setYear("");
                  setRangeStart("");
                  setRangeEnd("");
                }}
                style={{ marginLeft: 5, marginRight: 20 }}
              >
                <option value="day">–ó–∞ –¥–µ–Ω—å</option>
                <option value="month">–ó–∞ –º–µ—Å—è—Ü</option>
                <option value="year">–ó–∞ –≥–æ–¥</option>
                <option value="range">–ó–∞ –ø–µ—Ä–∏–æ–¥</option>
                <option value="all">–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è</option>
              </select>
            </label>

            {period === "day" && (
              <input
                type="date"
                value={date}
                onChange={(e) => setDate(e.target.value)}
                required
                style={inputStyle}
              />
            )}

            {period === "month" && (
              <input
                type="month"
                value={month}
                onChange={(e) => setMonth(e.target.value)}
                required
                style={inputStyle}
              />
            )}

            {period === "year" && (
              <input
                type="number"
                min="2000"
                max="2100"
                value={year}
                onChange={(e) => setYear(e.target.value)}
                placeholder="–ì–æ–¥"
                required
                style={{ ...inputStyle, width: 100 }}
              />
            )}

            {period === "range" && (
              <>
                <label style={{ marginLeft: 10 }}>
                  –°:
                  <input
                    type="date"
                    value={rangeStart}
                    onChange={(e) => setRangeStart(e.target.value)}
                    required
                    style={{ ...inputStyle, marginLeft: 5 }}
                  />
                </label>
                <label style={{ marginLeft: 10 }}>
                  –ü–æ:
                  <input
                    type="date"
                    value={rangeEnd}
                    onChange={(e) => setRangeEnd(e.target.value)}
                    required
                    style={{ ...inputStyle, marginLeft: 5 }}
                  />
                </label>
              </>
            )}

            <button
              type="submit"
              style={{ marginLeft: 10 }}
              disabled={
                (period === "day" && !date) ||
                (period === "month" && !month) ||
                (period === "year" && !year) ||
                (period === "range" && !isRangeValid())
              }
            >
              –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç
            </button>
          </form>

          {reportGenerated && (
            <>
              <div style={gridStyle}>
                <ReportCard title="–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤" value={stats.totalProducts} />
                <ReportCard title="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ" value={stats.totalQuantity} />
                <ReportCard title="–°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å" value={`${stats.totalValue} ‚ÇΩ`} />
                <ReportCard title="–°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π —Ç–æ–≤–∞—Ä" value={stats.mostExpensive} />
                <ReportCard title="–ú–µ–Ω—å—à–µ –≤—Å–µ–≥–æ –Ω–∞ —Å–∫–ª–∞–¥–µ" value={stats.leastStock} />
              </div>

              <p style={{ marginTop: 30, fontStyle: "italic" }}>
                –û—Ç—á—ë—Ç {getPeriodText()}
              </p>
            </>
          )}
        </>
      )}

      {mainTab === "charts" && (
        <>
          <nav style={{ marginBottom: 20 }}>
            {[
              { key: "stockCategories", label: "–û—Å—Ç–∞—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º" },
              { key: "incomingOutgoing", label: "–ü—Ä–∏—Ö–æ–¥/–†–∞—Å—Ö–æ–¥" },
              { key: "topSelling", label: "–¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤" },
              // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é
            ].map((tab) => (
              <button
                key={tab.key}
                onClick={() => setActiveChartTab(tab.key)}
                style={{
                  marginRight: 10,
                  padding: "6px 12px",
                  backgroundColor: activeChartTab === tab.key ? "#007bff" : "#eee",
                  color: activeChartTab === tab.key ? "white" : "black",
                  border: "none",
                  borderRadius: 4,
                  cursor: "pointer",
                }}
              >
                {tab.label}
              </button>
            ))}
          </nav>

          <div style={{ width: "100%", height: 400 }}>
            {activeChartTab === "stockCategories" && (
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={stockCategoriesData}
                  margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="category" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="stock" fill="#8884d8" />
                </BarChart>
              </ResponsiveContainer>
            )}

            {activeChartTab === "incomingOutgoing" && (
              <ResponsiveContainer width="100%" height="100%">
                <LineChart
                  data={incomingOutgoingData}
                  margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="incoming" stroke="#82ca9d" />
                  <Line type="monotone" dataKey="outgoing" stroke="#8884d8" />
                </LineChart>
              </ResponsiveContainer>
            )}

            {activeChartTab === "topSelling" && (
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={topSellingData}
                    dataKey="sales"
                    nameKey="name"
                    cx="50%"
                    cy="50%"
                    outerRadius={120}
                    fill="#8884d8"
                    label
                  >
                    {topSellingData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            )}
          </div>
        </>
      )}
    </div>
  );
}

const ReportCard = ({ title, value }) => (
  <div style={{
    backgroundColor: "#f7f7f7",
    borderRadius: 6,
    padding: 15,
    boxShadow: "0 2px 5px rgba(0,0,0,0.1)",
    minWidth: 180,
    textAlign: "center",
    fontWeight: "bold",
    fontSize: 18,
  }}>
    <div style={{ color: "#555", marginBottom: 8 }}>{title}</div>
    <div>{value}</div>
  </div>
);

const formStyle = {
  marginBottom: 20,
  display: "flex",
  alignItems: "center",
  flexWrap: "wrap",
  gap: 10,
};

const inputStyle = {
  marginLeft: 5,
  padding: 5,
  borderRadius: 4,
  border: "1px solid #ccc",
};

const gridStyle = {
  display: "grid",
  gridTemplateColumns: "repeat(auto-fit, minmax(180px, 1fr))",
  gap: 15,
  marginTop: 20,
};
